Feature Documentation: Task U
1. User Registration & Verification
Frontend
* Registration Page:
   * User selects a role: “Student” or “Service Provider”.
   * Input fields:
      * Email (university email for students; any email for providers).
      * Password.
      * Full Name.
   * If “Service Provider” is selected, add:
      * Service Type Selection (dropdown to choose from predefined categories).
      * Upload Fields for Verification Documents (e.g., government ID, certifications).
   * Submit button triggers an API call to register the user and submit any necessary documents.
* Verification Process (Provider):
   * After registration, if the user is a provider, their account is set to "pending verification."
   * UI shows a banner informing the user that their verification is being processed.
Backend
* Authentication API:
   * POST /api/auth/register: Takes user data (name, email, password, role) and creates an entry in the Users table.
   * Verify email using Firebase Auth or a custom service.
* Verification API (Provider):
   * POST /api/provider/verify: Uploads ID and service-related documents.
   * Store these documents in AWS S3 or Cloudinary.
   * Set provider’s status to "pending" in the Providers table.
* Admin Verification:
   * Admins review the documents in a dashboard (see Admin Dashboard below) and either approve or deny the provider’s account.
   * If approved, the provider is allowed to post services. If denied, the provider is notified and asked to re-submit verification.
________________


2. Service Posting by Providers
Frontend
* Service Creation Form:
   * Accessible only to verified providers.
   * Fields:
      * Service Title.
      * Service Description.
      * Pricing (fixed price or custom pricing option).
      * Availability (date/time, recurring options).
      * Upload Images (portfolio or examples of work).
      * Location (for in-person services).
   * Submit button triggers an API call to create the service.
* Service Listing:
   * Displays all the services posted by the provider.
   * Options to edit or delete services.
Backend
* Service Creation API:
   * POST /api/services/create: Takes service details (title, description, price, availability, images, location) and saves to the Services table.
   * Images are uploaded to AWS S3/Cloudinary, and URLs are saved in the database.
* Service Listing API:
   * GET /api/services/my-services: Fetches all services posted by the logged-in provider from the Services table.
* Edit/Delete Service API:
   * PUT /api/services/edit/:serviceId: Updates a service’s details in the Services table.
   * DELETE /api/services/delete/:serviceId: Removes a service from the Services table.
________________


3. Categorized Services & Search
Frontend
* Search Bar:
   * Search by service name, category, or provider.
   * Filters for location, price range, availability.
* Service Categories:
   * Display service categories on the home page (e.g., Academic Help, Transportation, Household Services, etc.).
   * Clicking a category filters services by type.
Backend
* Search API:
   * GET /api/services/search?query={query}&filters={filters}: Searches the Services table by query and filters.
   * Supports filters such as category, location, price, availability.
* Service Categories API:
   * GET /api/services/categories: Fetches available service categories from the Categories table.
________________


4. Booking System
Frontend
* Booking Form:
   * Appears on the service provider’s profile page.
   * Fields:
      * Preferred Date/Time.
      * Additional Notes.
      * Location (if needed).
   * Once submitted, a booking request is sent to the provider for approval.
* Booking Management:
   * Providers can view and manage bookings in a dashboard.
   * They can accept, reject, or propose new time slots for bookings.
Backend
* Booking API:
   * POST /api/bookings/create: Takes the service ID, preferred date/time, and notes, then creates a booking in the Bookings table.
   * Booking status is set to "pending."
* Manage Bookings API:
   * GET /api/bookings/provider: Fetches bookings for a specific provider from the Bookings table.
   * PUT /api/bookings/accept/:bookingId: Accepts a booking and changes its status to "confirmed."
   * PUT /api/bookings/reject/:bookingId: Rejects a booking and deletes the request.
________________


5. Payments & Pricing
Frontend
* Payment Form:
   * Students are prompted to make payment after a service is confirmed.
   * Payment options include debit/credit cards, PayPal, etc.
* Price Breakdown:
   * Display service cost, platform fee (optional), and total amount payable.
Backend
* Payment API:
   * POST /api/payments/process: Integrates with Stripe or PayPal to handle payments.
   * Once payment is successful, the booking is marked as "paid" and stored in the Transactions table.
* Transaction Management:
   * Admin can view all transactions via a dashboard.
   * Providers can view earnings and payment history in their profile.
________________


6. Ratings & Reviews
Frontend
* Review Form:
   * After a service is completed, students are prompted to leave a rating (1-5 stars) and a written review.
   * Reviews are displayed on the service provider’s profile.
Backend
* Review API:
   * POST /api/reviews/create: Saves the rating and review to the Reviews table.
   * GET /api/reviews/:serviceId: Fetches all reviews for a specific service from the Reviews table.
________________


7. In-App Messaging
Frontend
* Messaging Interface:
   * Real-time chat system between students and providers to discuss service details.
   * Push notifications for new messages.
Backend
* Messaging API:
   * POST /api/messages/send: Sends a message between users.
   * GET /api/messages/conversation/:userId: Fetches message history between two users.
* Push Notifications:
   * Use Firebase Cloud Messaging to notify users of new messages.
________________


8. Provider Profiles
Frontend
* Profile Page:
   * Display provider’s bio, service offerings, reviews, ratings, and portfolio.
   * Option for providers to edit their profile.
Backend
* Profile API:
   * GET /api/providers/:providerId: Fetches provider details from the Users and Services tables.
   * PUT /api/providers/edit: Allows providers to update their profile information.
________________


9. Admin Dashboard
Frontend
* Admin Interface:
   * Admins can view pending verification requests, manage users, services, and bookings, and handle disputes.
   * Statistics on number of users, services, and transactions.
Backend
* Admin API:
   * GET /api/admin/verification-requests: Fetches pending provider verification requests.
   * PUT /api/admin/approve-provider/:providerId: Approves a provider’s account.
   * GET /api/admin/transactions: Fetches transaction history.
________________


10. Security & Data Privacy
Frontend
* Ensure SSL/TLS is enabled for secure communication.
* Implement two-factor authentication for providers, if needed.
Backend
* Store passwords securely using bcrypt or a similar hashing algorithm.
* Use role-based access control (RBAC) to ensure that only authorized users (e.g., admins) can perform sensitive actions (e.g., approving providers).
________________


11. Notifications
Frontend
* Push notifications for booking updates, messages, and admin alerts.
Backend
* Use Firebase Cloud Messaging or similar to send notifications triggered by actions like booking confirmations or messages.