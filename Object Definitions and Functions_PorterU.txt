Object Definitions and Functions for University Services App
Data Models (Objects)
1. User
Represents both students and service providers in the system.
* Attributes:
   * id (String, UUID): Unique identifier for the user.
   * fullName (String): Full name of the user.
   * email (String): Email address (university email for students).
   * passwordHash (String): Hashed password for login.
   * role (Enum): STUDENT or PROVIDER, defines the user’s role.
   * isVerified (Boolean): If the user’s email is verified.
   * isProviderVerified (Boolean): Whether the service provider has been verified by the admin.
   * verificationDocs (Array of String): Links to verification documents (only for providers).
   * rating (Float): Average rating of the user (for providers).
   * createdAt (Date): Timestamp when the account was created.
   * updatedAt (Date): Timestamp when the account was last updated.
2. Service
Represents a service offering posted by a provider.
* Attributes:
   * id (String, UUID): Unique identifier for the service.
   * providerId (String, UUID): Reference to the user ID of the provider.
   * title (String): Title of the service (e.g., "Math Tutoring").
   * description (String): Detailed description of the service.
   * price (Float): Cost of the service.
   * priceType (Enum): FIXED or HOURLY, to define whether the price is fixed or per hour.
   * availability (Array of DateTime): List of available time slots for the service.
   * location (String): Physical location (if applicable).
   * categoryId (String, UUID): Category this service belongs to (e.g., "Tutoring").
   * images (Array of String): List of URLs pointing to service-related images.
   * createdAt (Date): Timestamp when the service was posted.
   * updatedAt (Date): Timestamp when the service was last updated.
3. Category
Represents a category for services.
* Attributes:
   * id (String, UUID): Unique identifier for the category.
   * name (String): Name of the category (e.g., "Transportation", "Tutoring").
   * description (String): Brief description of the category.
   * createdAt (Date): Timestamp when the category was created.
4. Booking
Represents a booking made by a student for a service.
* Attributes:
   * id (String, UUID): Unique identifier for the booking.
   * serviceId (String, UUID): Reference to the service being booked.
   * studentId (String, UUID): Reference to the user ID of the student.
   * providerId (String, UUID): Reference to the user ID of the service provider.
   * preferredDateTime (DateTime): The student’s requested date and time.
   * status (Enum): PENDING, CONFIRMED, REJECTED, COMPLETED.
   * notes (String): Additional notes or requests from the student.
   * paymentStatus (Enum): PENDING, PAID, FAILED.
   * createdAt (Date): Timestamp when the booking was created.
   * updatedAt (Date): Timestamp when the booking was last updated.
5. Transaction
Represents a payment transaction between a student and a service provider.
* Attributes:
   * id (String, UUID): Unique identifier for the transaction.
   * bookingId (String, UUID): Reference to the associated booking.
   * amount (Float): Amount paid for the service.
   * transactionDate (DateTime): Timestamp when the transaction took place.
   * paymentMethod (Enum): CREDIT_CARD, PAYPAL, etc.
   * status (Enum): SUCCESS, FAILED.
   * studentId (String, UUID): Reference to the student making the payment.
   * providerId (String, UUID): Reference to the provider receiving the payment.
6. Review
Represents a review given by a student to a service provider.
* Attributes:
   * id (String, UUID): Unique identifier for the review.
   * serviceId (String, UUID): Reference to the service being reviewed.
   * studentId (String, UUID): Reference to the student giving the review.
   * providerId (String, UUID): Reference to the provider receiving the review.
   * rating (Integer): Rating out of 5.
   * reviewText (String): Written review.
   * createdAt (Date): Timestamp when the review was submitted.
7. Message
Represents a message sent between a student and a service provider.
* Attributes:
   * id (String, UUID): Unique identifier for the message.
   * conversationId (String, UUID): Reference to the conversation thread.
   * senderId (String, UUID): Reference to the sender’s user ID.
   * receiverId (String, UUID): Reference to the receiver’s user ID.
   * content (String): Message content.
   * createdAt (Date): Timestamp when the message was sent.
8. Notification
Represents a system notification sent to a user.
* Attributes:
   * id (String, UUID): Unique identifier for the notification.
   * userId (String, UUID): Reference to the user receiving the notification.
   * message (String): Notification message.
   * read (Boolean): Whether the notification has been read.
   * createdAt (Date): Timestamp when the notification was sent.
________________


Function Definitions
1. Authentication Functions
* registerUser(userData):
   * Description: Registers a new user in the system, hashing the password and storing the user information in the database.
   * Parameters:
      * userData (Object): { fullName, email, password, role }.
   * Returns: { userId, status }.
* loginUser(credentials):
   * Description: Authenticates the user by verifying the credentials (email and password).
   * Parameters:
      * credentials (Object): { email, password }.
   * Returns: { token, user }.
* verifyUserEmail(token):
   * Description: Verifies the user's email address using a token sent to the user's email.
   * Parameters:
      * token (String): The verification token.
   * Returns: { status }.
* getVerificationStatus(userId):
   * Description: Retrieves the verification status of a service provider.
   * Parameters:
      * userId (String): The user’s ID.
   * Returns: { isProviderVerified, status }.
________________


2. Service Management Functions
* createService(serviceData):
   * Description: Allows a verified provider to create a new service offering.
   * Parameters:
      * serviceData (Object): { title, description, price, priceType, availability, location, images, categoryId }.
   * Returns: { serviceId, status }.
* editService(serviceId, serviceData):
   * Description: Allows a provider to edit an existing service.
   * Parameters:
      * serviceId (String): The ID of the service.
      * serviceData (Object): Updated service details.
   * Returns: { status }.
* deleteService(serviceId):
   * Description: Deletes a service offering from the platform.
   * Parameters:
      * serviceId (String): The ID of the service.
   * Returns: { status }.
* getServiceDetails(serviceId):
   * Description: Retrieves detailed information about a specific service.
   * Parameters:
      * serviceId (String): The ID of the service.
   * Returns: { serviceDetails }.
________________


3. Booking and Payment Functions
* createBooking(bookingData):
   * Description: Allows a student to create a booking for a service.
   * Parameters:
      * bookingData (Object): { serviceId, preferredDateTime, notes }.
   * Returns: { bookingId, status }.
* updateBookingStatus(bookingId, status):
   * Description: Allows a provider to accept, reject, or complete a booking.
   * Parameters:
      * bookingId (String): The ID of the booking.
      * status (Enum): The new status (CONFIRMED, REJECTED, COMPLETED).
   * Returns: { status }.
* processPayment(bookingId, paymentDetails):
   * Description: Processes payment for a confirmed booking.
   * Parameters:
      * bookingId (String): The ID of the booking.
      * paymentDetails (Object): { amount, paymentMethod }.
   * Returns: { transactionId, status }.
________________


4. Review and Rating Functions
* submitReview(reviewData):
   * Description: Allows a student to submit a review and rating for a completed service.
   * Parameters:
      * reviewData (Object): { serviceId, rating, reviewText }.
   * Returns: { status }.
* getServiceReviews(serviceId):
   * Description: Retrieves all reviews for a specific service.
   * Parameters:
      * serviceId (String): The ID of the service.
   * Returns: { reviews }.
________________


5. Messaging Functions
* sendMessage(messageData):
   * Description: Sends a message between a student and a service provider.
   * Parameters:
      * messageData (Object): { conversationId, content, senderId, receiverId }.
   * Returns: { messageId, status }.
* getConversationMessages(conversationId):
   * Description: Retrieves all messages for a specific conversation.
   * Parameters:
      * conversationId (String): The ID of the conversation.
   * Returns: { messages }.
________________


6. Notification Functions
* sendNotification(notificationData):
   * Description: Sends a notification to a specific user.
   * Parameters:
      * notificationData (Object): { userId, message }.
   * Returns: { status }.
* getUserNotifications(userId):
   * Description: Retrieves all notifications for a specific user.
   * Parameters:
      * userId (String): The user ID.
   * Returns: { notifications }.
________________


7. Admin Functions
* approveProvider(providerId):
   * Description: Approves a service provider after reviewing their verification documents.
   * Parameters:
      * providerId (String): The ID of the provider.
   * Returns: { status }.
* getAllTransactions():
   * Description: Retrieves a list of all payment transactions on the platform.
   * Parameters:
      * None.
   * Returns: { transactions }.
* getVerificationRequests():
   * Description: Retrieves all pending provider verification requests.
   * Parameters:
      * None.
   * Returns: { verificationRequests }.